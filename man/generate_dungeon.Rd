% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dungeon.R
\name{generate_dungeon}
\alias{generate_dungeon}
\title{Generate A Dungeon Map}
\usage{
generate_dungeon(
  iterations = 5,
  n_row = 30,
  n_col = 50,
  n_points = 4,
  snake = FALSE,
  corridor_first = TRUE,
  seed = NULL,
  colour = TRUE
)
}
\arguments{
\item{iterations}{Numeric.}

\item{n_row}{Numeric. Number of row tiles in the dungeon, i.e. its height.}

\item{n_col}{Numeric. Number of column tiles in the dungeon, i.e. its width.}

\item{n_points}{Numeric. Number of start points to 'grow' rooms from.}

\item{snake}{Logical. Should the start points be connected in matrix index
order (\code{TRUE}), or randomly (\code{FALSE})?}

\item{corridor_first}{Logical. Join start points with corridors before
growing rooms (\code{TRUE}), or the other way round (\code{FALSE})?}

\item{seed}{Numeric. Seed to reproduce a dungeon.}

\item{colour}{Logical. Should the characters be coloured using \pkg{crayon}
(\code{TRUE})?}
}
\value{
A matrix, invisibly. Output via \code{\link[base]{cat}} to the
console.
}
\description{
Generate a tile-based ASCII character dungeon map. Lays down 'start points'
and connecting corridors from which rooms can be grown.
}
\details{
You will have to experiment to find the 'best' argument values for
your needs. Typically, a larger dungeon should have more
\code{n_points} and can be grown through more \code{iterations}, and vice
versa. Using \code{snake} will generally create a single winding cavern
with a more obvious 'start' and 'end'.
}
\examples{
\dontrun{generate_dungeon(10, 20, 30, 3)}
}
